import * as Meeco from '@meeco/sdk';
import { Keypair, KeypairResponse } from '@meeco/keystore-api-sdk';
import * as cryppo from '@meeco/cryppo';
import * as m from 'mithril';

// import "./styles.scss";

import { TemplateSchemaStore, ItemTemplate } from './TemplateSchemaStore';
// import JSONComponent from './JSONComponent.js';

const USER_AUTH_DATA = 'user_auth_data';

const environment = {
  vault: {
    url: 'https://sandbox.meeco.me/vault',
    subscription_key: '6d8c99536aa647a49d326e5ba3b99bf5',
  },
  keystore: {
    url: 'https://sandbox.meeco.me/keystore',
    subscription_key: '6d8c99536aa647a49d326e5ba3b99bf5',
  }
};

// Active user's AuthData from SessionStorage.
let AuthData = JSON.parse(sessionStorage.getItem(USER_AUTH_DATA) || '{}');
if (AuthData.data_encryption_key) {
  AuthData.data_encryption_key = Meeco.EncryptionKey.fromSerialized(AuthData.data_encryption_key);
  AuthData.key_encryption_key = Meeco.EncryptionKey.fromSerialized(AuthData.key_encryption_key);
  AuthData.passphrase_derived_key = Meeco.EncryptionKey.fromSerialized(AuthData.passphrase_derived_key);
}

let App = {
  authToken: AuthData.vault_access_token,
  userDEK: AuthData.data_encryption_key,

  loginService: new Meeco.UserService(environment),

  login: async function(userSecret: string, userPass: string) {
    console.log('begin auth');
    AuthData = await App.loginService.get(userPass, userSecret);
    console.log('finished auth');

    sessionStorage.setItem(USER_AUTH_DATA, JSON.stringify(AuthData));
    App.authToken = AuthData.vault_access_token;
    App.userDEK = AuthData.data_encryption_key.key;

    APIs.init();
  },
  logout: function() {
    sessionStorage.removeItem(USER_AUTH_DATA);
    App.authToken = '';
    App.userDEK = '';
  },
};

let APIs = {
  vaultFactory: Meeco.vaultAPIFactory(environment),
  ItemService: new Meeco.ItemService(environment),
  templates: undefined,
  init: function (): void {
    if (!App.authToken) return null;

    APIs.templates = new TemplateSchemaStore(environment.vault.url, App.authToken, environment.vault.subscription_key);
    // let userVault = APIs.vaultFactory({vault_access_token: App.authToken});
    // APIs.ItemTemplateAPI = userVault.ItemTemplateApi;
    // APIs.ItemAPI = userVault.ItemApi;

    console.log(APIs);
  },
};

function makeAuthHeaders(token: string) {
  return { 'Authorization': 'Bearer ' + token,
           'Meeco-Subscription-Key': environment.keystore.subscription_key };
}

function LoginComponent() {
  let secret = "1.xB2dP9.7JXpPj-qocZLf-MjT1XN-ULtA8H-8szT1f-SQz4U1-LifbZ6-ff";
  let pass = '';

  return {
    view: () =>
          m('form', { onsubmit: (e: any) => {
              e.preventDefault();
              App.login(secret, pass);
          }}, [
              m('input', { type: "text", placeholder: "secret", value: secret, oninput: (e: any) => secret = e.target.value }),
              m('input', { type: "password", oninput: (e: any) => pass = e.target.value }),
              m('button[type="submit"]', 'Login'),
              m('button', { onclick: () => App.logout() }, 'Logout'),
              m('input', { type: "text", placeholder: "Token", value: App.authToken, oninput: (e: any) => App.authToken = e.target.value }),
          ])
  };
}

/**
 * Create an ItemTemplate representing the given form.
 * @param formId
 */
function makeFormTemplate(formId: string): Promise<ItemTemplate> {

  let fieldNames = [];
  document.querySelectorAll('#' + formId + ' input').forEach((x: any) => fieldNames.push(x.name));

  // TODO may need a uniqueness component for template name
  return APIs.templates.saveUnlessExists({
    name: formId,
    label: 'Autogenerated form',
    slots_attributes: fieldNames.map(n => {return {label: n, slot_type_name: 'key_value'}})
  });
}

// Does Item Exist? How to lookup? What if multiple?
// function lookupItem(templateId) {
//     return m.request({
//       method: 'GET',
//       url: environment.vault.url + '/items?template_ids=' + templateId,
//       headers: { 'Authorization': 'Bearer ' + App.authToken }
//     }).then(data => {
//       console.log('found items');
//       console.log(data.items);
//       return data.items;
//     });
// }

// function collectSlotData() {
//   let fields = [];
//   document.querySelectorAll('#test-form input').forEach(x => fields.push({name: x.name, value: x.value}));
//   return fields;
// }

// No: create
// async function createItem(templateName, itemData) {
//   // TODO
//   let newItemResponse = await Promise.all(itemData.map(function (slot) {
//     return APIs.ItemService.encryptSlot(slot, App.userDEK);
//   })).then(slots_attributes =>
//     m.request({
//       method: 'POST',
//       url: environment.vault.url + '/items?next_page_after=123',
//       headers: { 'Authorization': 'Bearer ' + App.authToken },
//       body:{
//         template_name: templateName,
//         item: {
//           label: 'Auto label',
//           slots_attributes: slots_attributes
//         }
//       }
//     }));

//   let newItem = newItemResponse.item;
//   return newItem;
// }
async function createItem(templateName: string, itemData: any[]) {

async function connectHandler(invitationToken: string): Promise<Connection> {
  //create connection, if not exist
  //really just accepts the invitation...

  // const api = Meeco.keystoreAPIFactory(environment)(AuthData).KeypairApi
  const keyId = 'dog';

  let keyPair: Keypair;

  try {
    keyPair = await m.request({
      method: 'GET',
      url: environment.keystore.url + '/keypairs/external_id/' + keyId,
      headers: makeAuthHeaders(AuthData.keystore_access_token),
    }).then((r: KeypairResponse) => {
      console.log('Got KP response');
      return r.keypair;
    });
  } catch (e) {
    // TODO check it's really a 404
    console.log('creating a key for connection');

    const keyPairUn = await cryppo.generateRSAKeyPair();

    keyPair = await cryppo.encryptWithKey({
      data: keyPairUn.privateKey,
      key: AuthData.key_encryption_key.key,
      strategy: cryppo.CipherStrategy.AES_GCM,
    }).then(privateKeyEncrypted =>
      // api.keypairsPost({
      //   public_key: keyPairUn.publicKey,
      //   encrypted_serialized_key: privateKeyEncrypted.serialized,
      //   // API will 500 without
      //   metadata: {},
      //   // TODO this is for the v1 sandbox
      //   external_identifiers: (environment.keystore.subscription_key ? keyId : [keyId]),
      // })
      m.request({
        method: 'POST',
        url: environment.keystore.url + '/keypairs',
        headers: makeAuthHeaders(AuthData.keystore_access_token),
        body: {
        public_key: keyPairUn.publicKey,
        encrypted_serialized_key: privateKeyEncrypted.serialized,
        // API will 500 without
        metadata: {},
          external_identifiers: [keyId],
        }
      }))
      .then((result: KeypairResponse) => {
        return result.keypair;
      });
  }

  // TODO cannot establish a connection...
  return await Meeco.vaultAPIFactory(environment)(AuthData).ConnectionApi.connectionsPost({
      public_key: {
        keypair_external_id: keyPair.external_identifiers[0],
        public_key: keyPair.public_key,
      },
      connection: {
        encrypted_recipient_name: 'nothing here',
        invitation_token: invitationToken,
      },
    })
    .then(res => res.connection);
}

// function getInvite() {
//   // this is done serverside before drawing the thing
//   const keyPair = await createAndStoreKeyPair(auth);
//   // should just use service key

//   return await this.vaultApiFactory(authToken)
//       .InvitationApi.invitationsPost({
//         public_key: {
//           keypair_external_id: keyPair.keystoreStoredKeyPair.id,
//           public_key: keyPair.keyPair.publicKey,
//         },
//         invitation: {
//           encrypted_recipient_name: 'Bob'
//         },
//       })
//       .then(result => result.invitation);
// }

function showForm() {
  // document.getElementById('auth').show();
  // form on submit creates Meeco share
  // notifies advertiser
}

window.onload = () => {
  APIs.init();

  m.mount(document.getElementById('auth'), LoginComponent);

  document.getElementById('ad-target').onclick = () => {
    alert('I send connect request!');
    // Get Invite
    const inviteToken = document.getElementById('ad-target').attributes.getNamedItem('data-meeco-invite').value;

    let connection = connectHandler(inviteToken).then(c => {
    // get back recipient_id
      console.log(c);
      return c;
    });
    // let recipient = connection.user_id;
    // also some form_id for 'next_steps'
  };

  let fieldNames = [];
  document.querySelectorAll('#test-form input').forEach((x: any) => fieldNames.push(x.name));

  // APIs.templates.loadTemplates().then(() => {
  //   console.log('creating template');
  //   makeTemplate(templateName, fieldNames);

  //   let template = APIs.templates.getTemplateByName(templateName);

  //   lookupItem(template.id).then(existingItems => {

  //     if (existingItems.length > 0) {
  //       console.log('autofill');
  //       document.getElementById('test-form').insertAdjacentHTML('afterEnd', '<button>Autofill</button>');
  //     }

  //     document.getElementById('submit-target').onclick = e => {
  //       e.preventDefault();
  //       // TODO Create Connect
  //       Meeco.ConnectionService(environment).createConnection({from: _, to: _, options: _});

  //       createItem(templateName, collectSlotData()).then(d => {
  //         console.log(d);
  //         m.mount(document.getElementById('item-output'), JSONComponent(d));
  //       });
  //       // Once created -> share with Org/Service

  //       // TODO
  //       // Get {OrgId/service/Id}.agent_id

  //       // TODO Create Connect

  //       // TODO Create Share
  //       // TODO Send Invite
  //     };

  //   });
  // });
}
